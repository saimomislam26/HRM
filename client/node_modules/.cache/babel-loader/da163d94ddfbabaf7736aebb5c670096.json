{"ast":null,"code":"var _jsxFileName = \"G:\\\\HRM Management\\\\client\\\\src\\\\components\\\\body\\\\Csv.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseStyle = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifycontent: \"center\",\n  alignItems: \"center\",\n  padding: \"20px\",\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: \"#eeeeee\",\n  borderStyle: \"dashed\",\n  backgroundColor: \"#fafafa\",\n  color: \"#bdbdbd\",\n  outline: \"none\",\n  transition: \"border .24s ease-in-out\"\n};\nconst activeStyle = {\n  borderColor: \"#2196f3\"\n};\nconst acceptStyle = {\n  borderColor: \"#00e676\"\n};\nconst rejectStyle = {\n  borderColor: \"#ff1744\"\n};\n\nfunction Csv(props) {\n  _s();\n\n  const [files, setFiles] = useState([]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n    acceptedFiles,\n    open\n  } = useDropzone({\n    accept: \".csv, text/csv, application/vnd.ms-excel, application/csv, text/x-csv, application/x-csv, text/comma-separated-values, text/x-comma-separated-values\",\n    noClick: true,\n    noKeyboard: true,\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n    }\n  });\n  const style = useMemo(() => ({ ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [isDragActive, isDragReject]);\n  useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  console.log(acceptedFiles);\n  const filepath = acceptedFiles.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [file.path, \" - \", file.size, \" bytes\"]\n  }, file.path, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this));\n\n  const postData = async e => {\n    e.preventDefault();\n    const file = acceptedFiles[0].path;\n    const fileName = acceptedFiles[0].name;\n    const res = await fetch('http://localhost:5000/upload', {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      body: {\n        file,\n        filename\n      }\n    });\n    const data = await res.json();\n\n    if (res.status === 400 || !data) {\n      window.alert(data.errors);\n      console.log(data.errors);\n    } else {\n      window.alert(\"Registration Successful\");\n      console.log(\"Registration successful\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        style\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag 'n' drop some files here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"(Only CSV File will be accepted)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: open,\n          children: \"Open File Dialog\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: filepath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-primary\",\n        onClick: postData,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Csv, \"Q9taOGu1XL1DF0BkL2DkRxE2eJs=\", false, function () {\n  return [useDropzone];\n});\n\n_c = Csv;\n\n/*#__PURE__*/\n_jsxDEV(Csv, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 139,\n  columnNumber: 1\n}, this);\n\nexport default Csv;\n\nvar _c;\n\n$RefreshReg$(_c, \"Csv\");","map":{"version":3,"sources":["G:/HRM Management/client/src/components/body/Csv.js"],"names":["React","useMemo","useEffect","useState","useDropzone","baseStyle","flex","display","flexDirection","justifycontent","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","Csv","props","files","setFiles","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","acceptedFiles","open","accept","noClick","noKeyboard","onDrop","map","file","Object","assign","preview","URL","createObjectURL","style","forEach","revokeObjectURL","console","log","filepath","path","size","postData","e","preventDefault","fileName","name","res","fetch","method","headers","body","filename","data","json","status","window","alert","errors"],"mappings":"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","sourcesContent":["\r\nimport React, { useMemo, useEffect, useState } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nconst baseStyle = {\r\n    flex: 1,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifycontent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: \"20px\",\r\n    borderWidth: 2,\r\n    borderRadius: 2,\r\n    borderColor: \"#eeeeee\",\r\n    borderStyle: \"dashed\",\r\n    backgroundColor: \"#fafafa\",\r\n    color: \"#bdbdbd\",\r\n    outline: \"none\",\r\n    transition: \"border .24s ease-in-out\"\r\n};\r\n\r\nconst activeStyle = {\r\n    borderColor: \"#2196f3\"\r\n};\r\n\r\nconst acceptStyle = {\r\n    borderColor: \"#00e676\"\r\n};\r\n\r\nconst rejectStyle = {\r\n    borderColor: \"#ff1744\"\r\n};\r\n\r\n\r\n\r\nfunction Csv(props) {\r\n    const [files, setFiles] = useState([]);\r\n    const {\r\n        getRootProps,\r\n        getInputProps,\r\n        isDragActive,\r\n        isDragAccept,\r\n        isDragReject,\r\n        acceptedFiles,\r\n        open\r\n    } = useDropzone({\r\n        accept: \".csv, text/csv, application/vnd.ms-excel, application/csv, text/x-csv, application/x-csv, text/comma-separated-values, text/x-comma-separated-values\",\r\n        noClick: true,\r\n        noKeyboard: true,\r\n        onDrop: acceptedFiles => {\r\n            setFiles(\r\n                acceptedFiles.map(file =>\r\n                    Object.assign(file, {\r\n                        preview: URL.createObjectURL(file)\r\n                    })\r\n                )\r\n            );\r\n        }\r\n    });\r\n\r\n    const style = useMemo(\r\n        () => ({\r\n            ...baseStyle,\r\n            ...(isDragActive ? activeStyle : {}),\r\n            ...(isDragAccept ? acceptStyle : {}),\r\n            ...(isDragReject ? rejectStyle : {})\r\n        }),\r\n        [isDragActive, isDragReject]\r\n    );\r\n\r\n\r\n    useEffect(\r\n        () => () => {\r\n            // Make sure to revoke the data uris to avoid memory leaks\r\n            files.forEach(file => URL.revokeObjectURL(file.preview));\r\n        },\r\n        [files]\r\n    );\r\n    console.log(acceptedFiles);\r\n\r\n    const filepath = acceptedFiles.map(file => (\r\n\r\n        <li key={file.path}>\r\n            {file.path} - {file.size} bytes\r\n        </li>\r\n    ));\r\n\r\n    const postData = async (e) => {\r\n        e.preventDefault();\r\n        const file = acceptedFiles[0].path\r\n        const fileName = acceptedFiles[0].name\r\n        const res = await fetch('http://localhost:5000/upload', {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            },\r\n            body: {\r\n                file, filename\r\n            }\r\n\r\n        })\r\n        const data = await res.json()\r\n        if (res.status === 400 || !data) {\r\n            window.alert(data.errors)\r\n            console.log(data.errors)\r\n        }\r\n        else {\r\n            window.alert(\"Registration Successful\");\r\n            console.log(\"Registration successful\")\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div {...getRootProps({ style })}>\r\n                <input {...getInputProps()} />\r\n                <p>Drag 'n' drop some files here</p>\r\n                <em>(Only CSV File will be accepted)</em>\r\n                <div className=\"mt-3\">\r\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={open}>\r\n                        Open File Dialog\r\n                    </button>\r\n                </div>\r\n\r\n            </div>\r\n            <aside>\r\n                <h4>Files</h4>\r\n                <ul>{filepath}</ul>\r\n            </aside>\r\n            <div className=\"mt-3\">\r\n                <button type=\"button\" className=\"btn btn-primary\" onClick={postData}>\r\n                    Add\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n<Csv />\r\n\r\nexport default Csv"]},"metadata":{},"sourceType":"module"}