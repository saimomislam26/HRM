[{"G:\\HRM Management\\client\\src\\index.js":"1","G:\\HRM Management\\client\\src\\App.js":"2","G:\\HRM Management\\client\\src\\reportWebVitals.js":"3","G:\\HRM Management\\client\\src\\components\\body\\Show.js":"4","G:\\HRM Management\\client\\src\\components\\body\\Contact.js":"5","G:\\HRM Management\\client\\src\\components\\body\\Csv.js":"6","G:\\HRM Management\\client\\src\\components\\body\\Add.js":"7","G:\\HRM Management\\client\\src\\components\\header\\Navbar.js":"8","G:\\HRM Management\\client\\src\\components\\AlertMessage\\Message.js":"9","G:\\HRM Management\\client\\src\\components\\Context\\createContext.js":"10","G:\\HRM Management\\client\\src\\components\\reducer\\reducer.js":"11"},{"size":593,"mtime":1629479774515,"results":"12","hashOfConfig":"13"},{"size":670,"mtime":1629565229528,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":4741,"mtime":1629565072519,"results":"16","hashOfConfig":"13"},{"size":9234,"mtime":1629546627488,"results":"17","hashOfConfig":"13"},{"size":4891,"mtime":1629610544548,"results":"18","hashOfConfig":"13"},{"size":4824,"mtime":1629565026771,"results":"19","hashOfConfig":"13"},{"size":2194,"mtime":1629575508880,"results":"20","hashOfConfig":"13"},{"size":276,"mtime":1629483842505,"results":"21","hashOfConfig":"13"},{"size":973,"mtime":1629551566324,"results":"22","hashOfConfig":"13"},{"size":1113,"mtime":1629562113793,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"6rahym",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"G:\\HRM Management\\client\\src\\index.js",[],["49","50"],"G:\\HRM Management\\client\\src\\App.js",[],"G:\\HRM Management\\client\\src\\reportWebVitals.js",[],"G:\\HRM Management\\client\\src\\components\\body\\Show.js",["51"],"import React, { useEffect, useState } from 'react'\r\nimport _ from \"lodash\"\r\nconst Show = () => {\r\n    const pageSize = 5;\r\n\r\n    const [data, setData] = useState([])\r\n    const [pagePost, setpagePost] = useState([])\r\n    const [currPage, setcurrPage] = useState(1)\r\n    const getData = async (e) => {\r\n\r\n        const res = await fetch('http://localhost:5000/show', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        })\r\n        const temp = await res.json();\r\n        setData(temp);\r\n        setpagePost(_(temp).slice(0).take(pageSize).value())\r\n        if (res.status === 400 || !data) {\r\n            window.alert(temp.message)\r\n            console.log(temp.message)\r\n        }\r\n        else {\r\n            console.log(data)\r\n        }\r\n\r\n    }\r\n    useEffect(() => {\r\n        getData()\r\n    }, []);\r\n    console.log(pagePost)\r\n    const count = Math.ceil(data.length / pageSize)\r\n    // if (count === 1) return null;\r\n    const pageNo = _.range(1, count + 1)\r\n\r\n    const pagination = (page) => {\r\n        console.log(`${currPage} I am from Pagination`)\r\n        setcurrPage(page);\r\n        const startIndex = (page - 1) * pageSize\r\n        const currPost = _(data).slice(startIndex).take(pageSize).value()\r\n        setpagePost(currPost)\r\n    }\r\n    const previous = () => {\r\n\r\n        if (currPage <= count && currPage > 1) {\r\n            const temp = currPage - 1\r\n            // console.log(`${temp} previous`)\r\n            setcurrPage(temp)\r\n            // console.log(`${currPage} previous`)\r\n            const startIndex = (currPage - 2) * pageSize\r\n            const currPost = _(data).slice(startIndex).take(pageSize).value()\r\n            setpagePost(currPost)\r\n        }\r\n        else {\r\n            return pagePost\r\n        }\r\n    }\r\n    const next = () => {\r\n        console.log(`${currPage} I am from next`)\r\n        if (currPage < count) {\r\n            const temp = currPage + 1\r\n            setcurrPage(temp)\r\n            const startIndex = (currPage) * pageSize\r\n            const currPost = _(data).slice(startIndex).take(pageSize).value()\r\n            setpagePost(currPost)\r\n            console.log(`${currPage} I am from next inside`)\r\n        }\r\n        else {\r\n\r\n            return pagePost\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <div className=\"table-bord\">\r\n                <table className=\"table table-striped mydatatable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">id</th>\r\n                            <th scope=\"col\">First Name</th>\r\n                            <th scope=\"col\">Last Name</th>\r\n                            <th scope=\"col\">Email</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        {\r\n                            pagePost.map((val, ind) => {\r\n                                return (\r\n                                    <>\r\n                                        <tr key={ind}>\r\n                                            <th scope=\"row\">{val.id}</th>\r\n                                            <td>{val.firstname}</td>\r\n                                            <td>{val.lastname}</td>\r\n                                            <td>{val.email}</td>\r\n                                        </tr>\r\n                                    </>\r\n\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n\r\n            <nav className=\"d-flex justify-content-center align-items-center\">\r\n                <button type=\"button\" className=\"btn btn-primary mb-2\" style={{ fontSize: \"13px\" }} onClick={previous}>\r\n                    previous\r\n                </button>\r\n                <ul className=\"pagination mt-4\">\r\n                    {\r\n\r\n                        pageNo.map((val, ind) => {\r\n                            return (\r\n                                <li className={val === currPage ? \"page-item active\" : \"page-item\"} key={ind}>\r\n                                    <p className=\"page-link\" onClick={() => pagination(val)}>\r\n                                        {val}\r\n                                    </p>\r\n                                </li>\r\n                            )\r\n\r\n                        })\r\n                    }\r\n\r\n                </ul>\r\n                <button type=\"button\" className=\"btn btn-primary mb-2\" style={{ fontSize: \"13px\" }} onClick={next} >\r\n                    next\r\n                </button>\r\n            </nav>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Show\r\n","G:\\HRM Management\\client\\src\\components\\body\\Contact.js",["52","53","54"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport _ from \"lodash\"\r\nimport Message from '../AlertMessage/Message'\r\nimport { ProjectContext } from '../Context/createContext'\r\nconst Contact = () => {\r\n    const { user, getUserMail } = useContext(ProjectContext);\r\n    const pageSize = 5;\r\n    const [data, setData] = useState([])\r\n    const [pagePost, setpagePost] = useState([])\r\n    const [currPage, setcurrPage] = useState(1)\r\n    const [mail, setMail] = useState({\r\n        from: \"\", subject: \"\", text: \"\", password: \"\"\r\n    })\r\n    // const [user, setuserMail] = useState([])\r\n    const [message, setMessage] = useState(\"\")\r\n    let name, value\r\n    const eventHandle = (e) => {\r\n\r\n        name = e.target.name\r\n        value = e.target.value\r\n\r\n        setMail({ ...mail, [name]: value })\r\n\r\n    }\r\n    const getData = async (e) => {\r\n        const res = await fetch('http://localhost:5000/show', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        })\r\n        const temp = await res.json();\r\n\r\n        setData(temp);\r\n        setpagePost(_(temp).slice(0).take(pageSize).value())\r\n\r\n        if (res.status === 400 || !data) {\r\n            window.alert(temp.message)\r\n            console.log(temp.message)\r\n        }\r\n        else {\r\n            console.log(data)\r\n            console.log(pagePost)\r\n        }\r\n\r\n    }\r\n    useEffect(() => {\r\n        getData()\r\n    }, []);\r\n    const count = Math.ceil(data.length / pageSize)\r\n    if (count === 1) return null;\r\n    const pageNo = _.range(1, count + 1)\r\n\r\n    const pagination = (page) => {\r\n        setcurrPage(page);\r\n        const startIndex = (page - 1) * pageSize\r\n        const currPost = _(data).slice(startIndex).take(pageSize).value()\r\n        setpagePost(currPost)\r\n    }\r\n    const previous = () => {\r\n        if (currPage <= count && currPage > 1) {\r\n            const temp = currPage - 1\r\n            // console.log(`${temp} previous`)\r\n            setcurrPage(temp)\r\n            // console.log(`${currPage} previous`)\r\n            const startIndex = (currPage - 2) * pageSize\r\n            const currPost = _(data).slice(startIndex).take(pageSize).value()\r\n            setpagePost(currPost)\r\n        }\r\n        else {\r\n            return pagePost\r\n        }\r\n    }\r\n    const next = () => {\r\n        if (currPage < count) {\r\n            const temp = currPage + 1\r\n            // console.log(`${temp} next`)\r\n            setcurrPage(temp)\r\n            // console.log(`${currPage} next`)\r\n            const startIndex = (currPage) * pageSize\r\n            const currPost = _(data).slice(startIndex).take(pageSize).value()\r\n            setpagePost(currPost)\r\n        }\r\n        else {\r\n\r\n            return pagePost\r\n        }\r\n\r\n    }\r\n\r\n    const sendMail = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const { subject, text, from, password } = mail\r\n        if (user.length == 0) {\r\n            return setMessage(\"No user Selected\")\r\n        }\r\n        user.map(async email => {\r\n            const res = await fetch('http://localhost:5000/sendmail', {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    from, subject, text, email, password\r\n                })\r\n            })\r\n            const temp = await res.json();\r\n\r\n            if (res.status === 400) {\r\n                setMessage(temp.message)\r\n            }\r\n            else if (res.status === 500) {\r\n                setMessage(\"Give A Valid Email\")\r\n            }\r\n            else {\r\n                setMessage(temp.message)\r\n            }\r\n\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"mt-5 container\">\r\n            {\r\n                message ? <Message message={message} /> : null\r\n            }\r\n            <div className=\"table-bord\">\r\n                <table className=\"table table-striped mydatatable\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\"> </th>\r\n                            <th scope=\"col\">id</th>\r\n                            <th scope=\"col\">First Name</th>\r\n                            <th scope=\"col\">Last Name</th>\r\n                            <th scope=\"col\">Email</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            pagePost.map((val, ind) => {\r\n                                return (\r\n                                    <>\r\n                                        <tr key={ind}>\r\n                                            <td><input type=\"checkbox\" value={val.id} onClick={(e) => getUserMail(data, val.email, e)} /></td>\r\n                                            <td scope=\"row\">{val.id}</td>\r\n                                            <td>{val.firstname}</td>\r\n                                            <td>{val.lastname}</td>\r\n                                            <td>{val.email}</td>\r\n                                        </tr>\r\n                                    </>\r\n\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <nav className=\"d-flex justify-content-center align-items-center\">\r\n\r\n                <button type=\"button\" className=\"btn btn-primary mb-2\" style={{ fontSize: \"13px\" }} onClick={previous} >\r\n                    previous\r\n                </button>\r\n                <ul className=\"pagination mt-4\">\r\n                    {\r\n                        pageNo.map((val, ind) => {\r\n\r\n                            return (\r\n\r\n                                <li className={val === currPage ? \"page-item active\" : \"page-item\"} key={ind}>\r\n                                    <p className=\"page-link\" onClick={() => pagination(val)}>\r\n                                        {val}\r\n                                    </p>\r\n                                </li>\r\n                            )\r\n\r\n                        })\r\n                    }\r\n\r\n                </ul>\r\n                <button type=\"button\" className=\"btn btn-primary mb-2\" style={{ fontSize: \"13px\" }} onClick={next}  >\r\n                    next\r\n                </button>\r\n            </nav>\r\n\r\n            {/* Form Section */}\r\n            <div className=\"signup-form \">\r\n                <div className=\"signup-content border-light\">\r\n\r\n                    <h1 className=\"text-center\">Send Mail</h1>\r\n\r\n                    <form method=\"POST\" >\r\n                        <div className=\"form-row  d-flex justify-content-center\">\r\n                            <div className=\"form-group mt-5  \" style={{ width: \"72%\" }}>\r\n\r\n                                <label htmlFor=\"inputName\">From</label>\r\n\r\n                                <input type=\"text\" className=\"form-control\" name=\"from\"\r\n                                    value={mail.from} onChange={eventHandle} placeholder=\"Sender Email\" required=\"required\" />\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"form-row  d-flex justify-content-center\">\r\n                            <div className=\"form-group mt-3\" style={{ width: \"72%\" }}>\r\n\r\n                                <label htmlFor=\"inputName\">Password</label>\r\n\r\n                                <input type=\"password\" className=\"form-control\" name=\"password\"\r\n                                    value={mail.password} onChange={eventHandle} placeholder=\"Password\"\r\n                                    required=\"required\" />\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-row  d-flex justify-content-center\">\r\n                            <div className=\"form-group mt-3 \" style={{ width: \"72%\" }}>\r\n\r\n                                <label htmlFor=\"inputName\">Subject</label>\r\n\r\n\r\n                                <input type=\"text\" className=\"form-control\" name=\"subject\"\r\n                                    value={mail.subject} onChange={eventHandle} placeholder=\"Email Subject\" required=\"required\" />\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"form-row  d-flex justify-content-center\">\r\n                            <div className=\"form-group \" style={{ width: \"72%\" }}>\r\n\r\n                                <label htmlFor=\"inputMessage\">Body</label>\r\n\r\n                                <textarea class=\"form-control\" name=\"text\" onChange={eventHandle} value={mail.text}></textarea>\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"d-flex justify-content-center align-items-center\">\r\n                            <button type=\"button\" className=\"btn btn-primary mb-2 \" onClick={sendMail} >\r\n                                send Mail\r\n                            </button>\r\n                        </div>\r\n\r\n\r\n                    </form>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div >\r\n    )\r\n\r\n}\r\n\r\nexport default Contact\r\n","G:\\HRM Management\\client\\src\\components\\body\\Csv.js",["55","56","57"],"G:\\HRM Management\\client\\src\\components\\body\\Add.js",[],"G:\\HRM Management\\client\\src\\components\\header\\Navbar.js",[],"G:\\HRM Management\\client\\src\\components\\AlertMessage\\Message.js",[],"G:\\HRM Management\\client\\src\\components\\Context\\createContext.js",[],"G:\\HRM Management\\client\\src\\components\\reducer\\reducer.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":31,"column":8,"nodeType":"64","endLine":31,"endColumn":10,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"63","line":49,"column":8,"nodeType":"64","endLine":49,"endColumn":10,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":95,"column":25,"nodeType":"69","messageId":"70","endLine":95,"endColumn":27},{"ruleId":"71","severity":1,"message":"72","line":145,"column":49,"nodeType":"73","endLine":145,"endColumn":60},{"ruleId":"62","severity":1,"message":"74","line":81,"column":9,"nodeType":"64","endLine":81,"endColumn":37,"suggestions":"75"},{"ruleId":"62","severity":1,"message":"76","line":88,"column":9,"nodeType":"64","endLine":88,"endColumn":11,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":120,"column":9,"nodeType":"80","messageId":"81","endLine":120,"endColumn":23},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["84"],["85"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/scope","The scope prop can only be used on <th> elements.","JSXAttribute","React Hook useMemo has a missing dependency: 'isDragAccept'. Either include it or remove the dependency array.",["86"],"React Hook useEffect has a missing dependency: 'files'. Either include it or remove the dependency array.",["87"],"no-unused-vars","'filepathchange' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"88","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [getData]",{"range":"95","text":"96"},{"range":"97","text":"96"},"Update the dependencies array to be: [isDragAccept, isDragActive, isDragReject]",{"range":"98","text":"99"},"Update the dependencies array to be: [files]",{"range":"100","text":"101"},[877,879],"[getData]",[1471,1473],[2517,2545],"[isDragAccept, isDragActive, isDragReject]",[2757,2759],"[files]"]